;; Custom Types

;; macros to generate your own types
;; both used to implement abstractions and APIs 
;; that are generated by Clojure Protocols

; deftype
; programming abstractions
; lightweight defrecord
; generates a new type with a simple constructor, the specified field, and nothing else.
; you can also mutate fields in an object generated using deftype
; for fine grain control over type

(deftype Position [x y])



; defrecord
; domain-specific abstractions
; new type with a ton of built in functionality
; generates an immutable, persistent map

(defrecord Person [name address])


;; Protocol
;; a named set of named methods and their signatures,
;; defined using defprotocol
;; like interfaces
;; a declaration of an API which you can then implement

;; defrecord and deftype can be used to create types
;; which implement a given defprotocol

;; when creating custom types,
;; prefer simple maps unless you are
;; interacting with protocols or Java!